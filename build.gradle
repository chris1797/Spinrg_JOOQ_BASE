buildscript {
	ext {
		jooqVersion = '3.19.10'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'nu.studer.jooq' version '9.0'
}

group = 'com.base.jooq'
version = '0.0.1-SNAPSHOT'
compileJava.options.encoding = "UTF-8"

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// https://mvnrepository.com/artifact/org.jooq/jooq
	// https://mvnrepository.com/artifact/org.jooq/jooq

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation "org.jooq:jooq:${jooqVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// 강의에 새로 추가된 제네레이터 관련 옵션들

//	jooqGenerator 'com.mysql:mysql-connector-j' :: jOOQ-custom 서브모듈에서 사용되고 있으므로 주석처리
	jooqGenerator project(':jOOQ-custom') // jOOQ-custom 프로젝트(서브모듈)를 참조
	jooqGenerator "org.jooq:jooq:${jooqVersion}"
	jooqGenerator "org.jooq:jooq-meta:${jooqVersion}"
}

dependencies {
	implementation group: 'org.eclipse.persistence', name: 'javax.persistence', version: '2.2.1'
	implementation 'mysql:mysql-connector-java:5.1.48'
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.1.1'
//	jooqRuntime('org.slf4j:slf4j-simple:1.7.9')
//	jooqRuntime 'mysql:mysql-connector-java:5.1.48'

	// test
	implementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	implementation 'org.springframework.security:spring-security-crypto:5.7.3'
}

jooq {
	version = "${jooqVersion}"
	configurations {
		test_db {
			generationTool {
				jdbc {
					driver = 'com.mysql.cj.jdbc.Driver'
					url = 'jdbc:mysql://localhost:3306'
					user = 'root'
					password = ''
				}

				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					database {
						name = 'org.jooq.meta.mysql.MySQLDatabase' // MySQL 을 기준으로 생성
//						unsignedTypes = true // unsigned 타입을 사용할 수 있도록 설정, 기본값 true
						schemata {
							schema { // 어떤 스키마를 기준으로 DSL 을 생성할지 설정
								inputSchema = 'test_db'
							}
						}

						// Java 의 타입과 DB 의 타입이 매칭되지 않는 경우 강제로 매칭시킬 수 있음
						// 아래 옵셥들은 MySQL 에서 사용되는 타입을 Java 의 타입으로 매칭시키는 설정
						forcedTypes {
							forcedType {
								userType = 'java.lang.Long'
								includeTypes = 'int unsigned'
							}
							forcedType {
								userType = 'java.lang.Integer'
								includeTypes = 'tinyint unsigned'
							}
							forcedType {
								userType = 'java.lang.Integer'
								includeTypes = 'smallint unsigned'
							}
						}
					}

					// DSL 을 생성할 때 사용할 설정
					generate {
						daos = true
						records = true
						fluentSetters = true // setter 사용 시 리턴 타입이 void 가 아닌 자기 자신을 리턴하도록 설정함
						javaTimeTypes = true // false 면 java.sql.Date 를 사용함, true 면 java.time.LocalDate 를 사용함. 켜는거 완전 강추
						deprecated = false
					}

					target { // 생성된 DSL 을 저장할 위치
						directory = 'src/generated'
//						directory = 'src/main/java/com/base/jooq/jooq/bean'
					}

					// 왜 따로 서브모듈로 빼서 사용하는지?
					strategy.name = 'jooq.custom.generator.JPrefixGeneratorStrategy'
				}
			}
		}
	}
}

sourceSets {
	main {
		java {
			srcDirs = ["src/main/java", "src/generated"]
		}
	}
}
//	edition = 'OSS'
//	generateSchemaSourceOnCompilation = true
//	Db(sourceSets.main) {
//		jdbc {
//			driver = 'com.mysql.jdbc.Driver'
//			url = 'jdbc:mysql://localhost:3306'
//			user = 'root'
//			password = ''
//		}
//		generator {
//			name = 'org.jooq.codegen.DefaultGenerator'
//			database {
//				name = 'org.jooq.meta.mysql.MySQLDatabase'
//				schemata {
//					schema {
//						inputSchema = 'test_db'
//					}
//				}
//				forcedTypes {
//					forcedType {
//						userType = 'java.time.LocalDateTime'
//						converter = 'com.example.LocalDateTimeForVarcharConverter'
//						expression = '.*DateTime'
//						types = 'VARCHAR\\(14\\)'
//					}
//					forcedType {
//						name = 'INT'
//						expression = '.*'
//						types = 'TINYINT'
//					}
//				}
//			}
//			generate {
//				jpaAnnotations = true
//				pojos = true
//				javaTimeTypes = true // Java 8 java.time API 로 날짜,시간 표현
//				relations = true
//				globalObjectReferences = true
//				pojosEqualsAndHashCode = true
//				indexes = false
//			}
//			target {
//				packageName = group+'.jooq.bean'
//				directory = file('src/main/java').absolutePath
//				encoding = 'UTF-8'
//			}
//		}
//}

tasks.named('test') {
	useJUnitPlatform()
}
